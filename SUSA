#include <SFML/Graphics.hpp>
#include "Header.h"
//#include "View.h"
#include <iostream>
#include <sstream>

//using namespace sf;

class Entity
{
public:
	float x, y, dx, dy, speed, moveTimer;
	int w, h;
	bool isMove, onGround;
	sf::String name;
	sf::Texture texture;
	sf::Sprite sprite;

	Entity (sf::Image& image, float X, float Y, int W, int H, sf::String Name)
	{
		x = X; y = Y; w = W; h = H; name = Name; moveTimer = 0;
		speed = 0; dx = 0; dy = 0;
		onGround = false; isMove = false;
		texture.loadFromImage(image);
		sprite.setTexture(texture);
		sprite.setOrigin(w / 2, h / 2);
	}
};

class Player: public Entity
{
public:
	//float x, y, w, h, dx, dy, speed = 0;
	//int direction = 0;
	//bool isMove = false, onGround;
	enum {left, right, up, doun, jump, stay} state;
	//sf::String File;
	//sf::Image image;
	//sf::Texture texture;
	//sf::Sprite sprite;

	Player(sf::Image &image, float X, float Y, int W, int H, sf::String Name):Entity(image, X, Y, W, H, Name)
	{
		//direction = 0; speed = 0; dx = 0; dy = 0;
		//onGround = false;
		//File = F;
		//w = W;
		//h = H;
		//image.loadFromFile("images/" + File);
		//texture.loadFromImage(image);
		//sprite.setTexture(texture);
		//x = X;
		//y = Y;
		state = stay;
		if(name == "susa")
		{
			sprite.setTextureRect(sf::IntRect(0, 0, w, h));
		}
		//sprite.setOrigin(w/2, h/2);
	}

	void control()
	{
		if (sf::Keyboard::isKeyPressed)
		{
			if (sf::Keyboard::isKeyPressed(sf::Keyboard::A))
			{
				state = left;
				speed = 0.1;
			}
			if (sf::Keyboard::isKeyPressed(sf::Keyboard::D))
			{
				state = right;
				speed = 0.1;
			}

			if ((sf::Keyboard::isKeyPressed(sf::Keyboard::LShift) || sf::Keyboard::isKeyPressed(sf::Keyboard::RShift)) && (sf::Keyboard::isKeyPressed(sf::Keyboard::A)))
			{
				state = left;
				speed = 0.1;
			}

			if ((sf::Keyboard::isKeyPressed(sf::Keyboard::Space)) && (onGround))
			{
				state = jump;
				dy = -0.4;
				onGround = false;
			}
		}
	}

	void checkCollisionWithMap(float Dx, float Dy)
	{
		for (int i = y / 32; i < (y + h) / 32; i++) //(int i = 0; i < HEIGHT_MAP; i++) 
		{
			for (int j = x / 32; j < (x + w) / 32; j++) //(int j = 0; j < WIDTH_MAP; j++)
			{
				if (TileMap[i][j] == 'g')
				{
					if (Dy > 0)
					{
						y = i * 32 - h;
						dy = 0;
						onGround = true;
					}
					if (Dy < 0)
					{
						y = i * 32 + 32;
						dy = 0;
					}
					if (Dx > 0)
					{
						x = j * 32 - w;
					}
					if (Dx < 0)
					{
						x = j * 32 + 32;
					}
				}
			}
		}
	}

	void update(float time)
	{
		//switch (direction)
		//{
		//case 0: dx = speed; dy = 0; break;
		//case 1: dx = -speed; dy = 0; break;
		//case 2: dx = 0; dy = speed; break;
		//case 3: dx = 0; dy = -speed; break;
		//}
		control();
		switch (state)
		{
		case right: dx = speed; break;
		case left: dx = -speed; break;
		case jump: break;
		case stay: break;
		}

		x += dx * time;
		checkCollisionWithMap(dx, 0);
		y += dy * time;
		checkCollisionWithMap(0, dy);
		sprite.setPosition(x + w / 2, y + h / 2);
		if (!isMove)
		{
			speed = 0;
		}
		dy = dy + 0.0015 * time;

		//speed = 0;
		//sprite.setPosition(x, y);
		//interactionWithMap();
	}

	/*void interactionWithMap()
	{
		for (int i = y / 100; i < (y + h) / 100; i++)
		{
			for (int j = x / 100; j < (x + w) / 100; j++)
			{
				if (TileMap[i][j] == '1' || TileMap[i][j] == 's' || TileMap[i][j] == 'w')
				{
					if (dy > 0)
						y = i * 100 - h;
					if (dy < 0)
						y = i * 100 + 100;
					if (dx > 0)
						x = j * 100 - w;
					if (dx < 0)
						x = j * 100 + 100;
				}
			}
		}
	}*/

	//float getplayercoordinateX()
	//{
	//	return x;
	//}
	//
	//float getplayercoordinateY()
	//{
	//	return y;
	//}
};


int main()
{
	sf::RenderWindow window(sf::VideoMode(1000, 600), "test");
	sf::View view(sf::FloatRect(0.f, 0.f, 1000.f, 600.f));
	//view.reset(sf::FloatRect(0, 0, 1000, 600));
	view.zoom(0.5f);
	

	sf::Image mapImage;
	mapImage.loadFromFile("images/fon2.png");
	sf::Texture map;
	map.loadFromImage(mapImage);
	sf::Sprite s_map;
	s_map.setTexture(map);

	sf::Image Susa;
	Susa.loadFromFile("images/susa3.png");

	//float CurrentFrame = 0;
	sf::Clock clock;

	Player susa(Susa, 0, 0, 32, 32,"susa");

	while (window.isOpen())
	{
		float time = clock.getElapsedTime().asMicroseconds();
		clock.restart();
		time = time / 800;

		sf::Event event;
		while (window.pollEvent(event))
		{
			if (event.type == sf::Event::Closed)
			{
				window.close();
			}
		}

		/*if (sf::Keyboard::isKeyPressed(sf::Keyboard::A))
		{
			susa.direction = 1;
			susa.speed = 0.1;
			CurrentFrame += 0.005 * time;
			if (CurrentFrame > 4)
			{
				CurrentFrame -= 4;
			}
			susa.sprite.setTextureRect(sf::IntRect(32 * int(CurrentFrame), 66, 32, 32));
			getplayercoordinateforview(susa.getplayercoordinateX(), susa.getplayercoordinateY());
		}

		if (sf::Keyboard::isKeyPressed(sf::Keyboard::D))
		{
			susa.direction = 0;
			susa.speed = 0.1;
			CurrentFrame += 0.005 * time;
			if (CurrentFrame > 4)
			{
				CurrentFrame -= 4;
			}
			susa.sprite.setTextureRect(sf::IntRect(32 * int(CurrentFrame), 98, 32, 32));
			getplayercoordinateforview(susa.getplayercoordinateX(), susa.getplayercoordinateY());
		}

		if ((sf::Keyboard::isKeyPressed(sf::Keyboard::LShift) && (sf::Keyboard::isKeyPressed(sf::Keyboard::A))))
		{
			susa.direction = 1;
			susa.speed = 0.1;
			CurrentFrame += 0.005 * time;
			if (CurrentFrame > 4)
			{
				CurrentFrame -= 4;
			}
			susa.sprite.setTextureRect(sf::IntRect(32 * int(CurrentFrame), 131, 32, 32));
			getplayercoordinateforview(susa.getplayercoordinateX(), susa.getplayercoordinateY());
		}*/

		/*if ((sf::Keyboard::isKeyPressed(sf::Keyboard::Up) || (sf::Keyboard::isKeyPressed(sf::Keyboard::W))))
		{
			susa.direction = 3;
			susa.speed = 0.1;
			CurrentFrame += 0.005 * time;
			if (CurrentFrame > 3)
			{
				CurrentFrame -= 3;
			}
			susa.sprite.setTextureRect(sf::IntRect(120 * int(CurrentFrame), 133, 120, 133));
		}*/

		/*if ((sf::Keyboard::isKeyPressed(sf::Keyboard::Down) || (sf::Keyboard::isKeyPressed(sf::Keyboard::S))))
		{
			susa.direction = 2;
			susa.speed = 0.1;
			CurrentFrame += 0.005 * time;
			if (CurrentFrame > 3)
			{
				CurrentFrame -= 3;
			}
			susa.sprite.setTextureRect(sf::IntRect(120 * int(CurrentFrame), 0, 120, 133));
		}*/

		susa.update(time);
		window.setView(view);
		window.clear();

		for (int i = 0; i < HEIGHT_MAP; i++)
		{
			for (int j = 0; j < WIDTH_MAP; j++)
			{
				if (TileMap[i][j] == 'w')
					s_map.setTextureRect(sf::IntRect(0, 0, 32, 32));
				if (TileMap[i][j] == 'g')
					s_map.setTextureRect(sf::IntRect(300, 0, 332, 32));
				s_map.setPosition(j * 32, i * 32);
				window.draw(s_map);
			}
		}

		window.draw(susa.sprite);
		window.display();
	}
	return 0;
}
