#include <iostream>

double PI = 3.1415926535;

class KinematicSolver
{
private:
	double m_alpha = NULL;
	double m_beta = NULL;
	double m_L1 = NULL;
	double m_L2 = NULL;
	double m_x, m_y;

	void set_data()
	{
		std::cout << "enter L1 and L2: ";
		std::cin >> m_L1;
		std::cin >> m_L2;
		std::cout << "\n";
		std::cout << "enter m(x,y): ";
		std::cin >> m_x;
		std::cin >> m_y;
	}

	int check_data()
	{
		if ((m_L1 == NULL) || (m_L2 == NULL))
		{
			std::cout << "incorrect length" << std::endl;
			return 1;
		}

		double hyp = sqrt(m_x * m_x + m_y * m_y);
		double maxx = std::max(hyp, m_L1);
		maxx = std::max(maxx, m_L2);


		if (maxx > (hyp + m_L1 + m_L2 - maxx))
		{
			std::cout << "This traingle is not exist";
			return 1;
		}
		return 0;
	}

	void Solve()
	{
		double hypotenuse = sqrt(m_x * m_x + m_y * m_y);
		double q2 = (pow(m_L1, 2) - pow(m_L2, 2) + pow(hypotenuse, 2));
		m_alpha = acos(m_x / hypotenuse) - acos(q2 / (2 * hypotenuse * m_L1));
		m_beta = PI - acos((pow(m_L1, 2) + pow(m_L2, 2) - pow(hypotenuse, 2)) / (2.0 * m_L1 * m_L2));
	}

public:
	KinematicSolver()
	{
		std::cout << "constructor" << std::endl;
		set_data();
		check_data();
		Solve();
	}

	~KinematicSolver()
	{
		std::cout << "distructor" << std::endl;
	}

	void getAlphaBeta() const
	{
		//std::cout << (180 * m_alpha) / PI << " " << (180 * m_beta) / PI << std::endl;
		std::cout << m_alpha << std::endl << m_beta;
	}
};


int main()
{
	KinematicSolver a;
	a.getAlphaBeta();
	
	system("pause");
}
