/*Реализуйте класс, который будет выполнять шифрование и дешифрование сообщения на английском языке.
Длина сообщения не более 30 слов. Словом называется последовательность символов до первого пробела.
Знак препинания после символов тоже входит в слово.
Ключом является последовательность Фибоначчи.*/

#include <iostream>
#include <string>
#include <vector>

class Encryption
{
private:
	std::string m_message;
	std::string m_Words[30];
	std::vector<int> m_FKey = { 1, 2 };
	std::vector<int> m_currentKey;
	int amountOfWords = 1;

	void WordCounter(std::string message)
	{
		for (int i = 0; i < message.length(); i++)
		{
			if (message[i] = ' ')
				amountOfWords += 1;
		}
	}

	void Fibonacci()
	{
		for (int i = 2; i < amountOfWords; i++)
		{
			m_FKey[i] = m_FKey[i - 1] + m_FKey[i + 2];
		}
	}

public:
	Encryption(std::string message, std::vector<int> currentKey)
	{
		m_message = message;
		m_currentKey = currentKey;
		WordCounter(message);
		Fibonacci();
	}

	void Words()
	{
		for (int i = 0; i < amountOfWords; i++)
		{
			for (int j = 0; j < m_message.length(); j++)
			{
				if (m_message[j] != ' ')
				{
					m_Words[i] += m_message[j];
				}
				else if (m_message[j] == ' ')
				{
					break;
				}
			}
		}
	}

	void InputKey()
	{
		std::cout << "Enter the key" << std::endl;
		int a;
		for (int i = 0; i < amountOfWords; i++) // ??
		{
			std::cin >> a;
			m_currentKey.push_back(a);
		}
	}

	bool Equal(std::vector<int> V1, std::vector<int> V2)
	{
		int coincidence = 0;
		for (int i = 0; i < amountOfWords; i++)
		{
			for (int j = 0; j < amountOfWords; j++)
			{
				if (V1[i] == V2[j] && V1[i] != V1[j])
				{
					coincidence += 1;
				}
			}
			if (coincidence != 1)
			{
				break;
			}
		}

		if (coincidence == amountOfWords)
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	void check_currentKey()
	{
		if (m_currentKey.size() == amountOfWords)
		{
			if (Equal(m_currentKey, m_FKey) == false)
			{
				std::cout << "Wrong Key" << std::endl;
			}
		}
	}


	void Encode()
	{
		for (int i = 0; i < amountOfWords; i++)
		{
			for (int j = 0; j < amountOfWords; j++)
			{
				if (m_currentKey[i] == m_FKey[j])
				{
					std::swap(m_Words[i], m_Words[j]);
				}
			}
		}
	}

	void Decode()
	{
		for (int i = amountOfWords; i > 0; i--)
		{
			for (int j = amountOfWords; j > 0; j--)
			{
				if (m_currentKey[i] == m_FKey[j])
				{
					std::swap(m_Words[i], m_Words[j]);
				}
			}
		}
	}

	void Output()
	{
		for (int i = 0; i < amountOfWords; i++)
		{
			std::cout << m_Words[i] << std::endl << m_currentKey[i] << " ";
		}
	}
};

int main()
{
	std::string message;
	std::vector<int> currentKey;
	std::cout << "Enter the message" << std::endl;
	std::getline(std::cin, message);
	Encryption SK(message, currentKey);
	SK.Words();
	SK.InputKey();
	SK.check_currentKey();
	SK.Encode();
	SK.Decode();
	SK.Output();
}
