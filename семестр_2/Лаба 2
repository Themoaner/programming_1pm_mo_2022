//Реализуйте класс String для работы со строками. У вас должны быть реализованы :
//1.+	Базовый конструктор
//2.+	Конструктор копирования(правило 3 - х)
//3.+	Оператор присваивания копированием(правило 3 - х)
//4.+	Деструктор(правило 3 - х)
//5.	Операторы + и +=
//6.	Оператор[] – чтение и изменение элемента
//7.	Операторы <, >, ==
//8.	Операторы ввода и вывода в поток
//9.	Метод find – поиск первого вхождения символа в строку слева
//10.+	Метод length – длина строки
//11.	Метод c_str – получить массив char
//12.	Метод at для получения доступа(чтение и изменение) к элементу строки с проверкой на выход за пределы строки

#include <iostream>
struct String
{
private:
	size_t m_size;
	char* m_str = nullptr;

public:
	String() = default;
	String(int c, size_t size) = delete; // Запрет неявного преобразования типов из int в char

	//1.) Конструктор (Неявное преобразование типов из int в char)
	String(char c, size_t size) : m_size(size), m_str(new char[size + 1])
	{
		std::fill(m_str, m_str + m_size, c);
		m_str[m_size] = 0;
	}

	//1.) Конструктор от строки, список инициализации членов класса (Member initializer)
	String(char* str) : m_size(strlen(str)), m_str(new char[m_size])
	{
		std::copy(str, str + m_size, m_str);
		m_str[m_size] = 0;
	}

	//2.) Конструктор копирования + делигирующий конструктор
	String(const String& other) : String(other.m_str)
	{
		m_size = other.m_size;
		//Выделили память
		m_str = new char[m_size];
		//Копируем строку из other
		std::copy(other.m_str, other.m_str + other.m_size, m_str);
	}
	

	//3.) Оператор присваивания копированием
	String& operator=(String& temp)
	{
		// Идиома copy-and-swap
		std::swap(m_size, temp.m_size);
		std::swap(m_str, temp.m_str);
		/*delete[] m_str;
		m_size = other.m_size;
		m_str = new char[m_size];
		std::copy(other.m_str, other.m_str + other.m_size, m_str);*/
		return *this;
	}
	

	//4.) Деструктор
	~String()
	{
		if (m_str != nullptr)
		{
			delete[] m_str;
		}
	}

	//10.) Length
	int length()
	{
		return (m_size - 1);
	}

	void Print() const
	{
		for (int i = 0; i < m_size; i++)
		{
			std::cout << m_str[i];
		}
	}
};

void f(String s)
{
	s.Print();
}

int main()
{
	String S1("Hello, world!");
	String S2("aaaaaaaa");
	f(S1);
	S2 = S1;

	S1.Print();
	S2.Print();

	return 0;
}
