#include <iostream>
#include <vector>	

int main()
{
	setlocale(LC_ALL, "Rus");
	std::vector <int> V1;
	std::vector <int> V2 = { 55, 145 };

	for (int i = 1; i <= 10; i++)
	{
		V1.push_back(i); // добавляем элемент в конец вектора
	}
	for (int i = 0; i < V1.size(); i++)
	{
		std::cout << V1[i] << std::endl;
	}

	// ПАМЯТЬ И РАЗМЕР
	// size -	Возвращает количество элементов в векторе.
	// capacity - Возвращает число элементов, которое вектор может содержать без выделения дополнительного пространства.
	
	std::cout << "Размер вектора :" << " " << V1.size() << std::endl; // размер вектора
	std::cout << "Размер доп. памяти :" << " " << V1.capacity() << std::endl; // размер доп. памяти

	// reserve - Резервирует минимальную длину хранилища для объекта вектора.
	// shrink_to_fit - Удаляет лишнюю емкость.

	V1.reserve(50); // устанавливаем сколько элементов должно быть в доп. памяти
	std::cout << "Размер доп. памяти после метода reserve() :" << " " << V1.capacity() << std::endl; // размер доп. памяти после reserve()

	V1.shrink_to_fit(); // удаляем доп. память
	std::cout << "Размер доп. памяти после метода shrink_to_fit() :" << " " << V1.capacity() << std::endl; // размер доп. памяти после shrink_to_fit()

	// resize - Определяет новый размер вектора.

	V1.resize(5); // меняем размер вектора
	V1.resize(5, 50); // добавляю 5 ячейки и в них будет '50'

	// clear - Очищает элементы вектора.

	V1.clear();
	std::cout << "Размер памяти вектора после метода clear() :" << " " << V1.size() << std::endl; //размер вектора после операции clear()

	// INSERT() - Вставляет элемент или несколько элементов в вектор по заданной позиции.
	// begin() - Возвращает итератор произвольного доступа, указывающий на первый элемент в векторе.
	// end() - Возвращает итератор произвольного доступа, который указывает на конец вектора.

	V2.insert(V2.begin(), 40); // добавляем элемент в начало вектора;
	V2.insert(V2.end(), 60); // добавляем элемент в конец вектора;
	std::cout << "После метода insert : ";
	for (int i = 0; i < V2.size(); i++)
	{
		std::cout << V2[i] << " ";
	}
	std::cout << std::endl;

	// erase - Удаляет элемент или диапазон элементов в векторе из заданных позиций.
	V2.erase(V2.begin());
	std::cout << "После метода erase : ";
	for (int i = 0; i < V2.size(); i++)
	{
		std::cout << V2[i] << " ";
	}
	std::cout << std::endl;

	// emplace_back - Добавляет элемент, созданный на месте, в конец вектора.
	V2.emplace_back(100);
	std::cout << "После метода emplace_back : ";
	for (int i = 0; i < V2.size(); i++)
	{
		std::cout << V2[i] << " ";
	}
	std::cout << std::endl;

	// ПРИСВАИВАНИЕ И []
	V2[2] = 1000;
	std::cout << "присваивание : ";
	for (int i = 0; i < V2.size(); i++)
	{
		std::cout << V2[i] << " ";
	}
	std::cout << std::endl;

	system("pause");
	return 0;
}
